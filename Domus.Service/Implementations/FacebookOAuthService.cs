using System.IdentityModel.Tokens.Jwt;
using Domus.Common.Constants;
using Domus.Common.Exceptions;
using Domus.Common.Extensions;
using Domus.Common.Helpers;
using Domus.Common.Settings;
using Domus.DAL.Interfaces;
using Domus.Domain.Entities;
using Domus.Service.Constants;
using Domus.Service.Interfaces;
using Domus.Service.Models;
using Domus.Service.Models.Email;
using Domus.Service.Models.Requests.Authentication;
using Domus.Service.Models.Responses;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;

namespace Domus.Service.Implementations;

public class FacebookOAuthService : IFacebookOAuthService
{
	private readonly UserManager<DomusUser> _userManager;
	private readonly IJwtService _jwtService;
	private readonly IEmailService _emailService;
	private readonly IUnitOfWork _unitOfWork;

	public FacebookOAuthService(UserManager<DomusUser> userManager, IJwtService jwtService, IEmailService emailService, IUnitOfWork unitOfWork)
	{
		_userManager = userManager;
		_jwtService = jwtService;
		_emailService = emailService;
		_unitOfWork = unitOfWork;
	}

	public async Task<ServiceActionResult> LoginAsync(OAuthRequest request)
	{
		var facebookLoginRequest = (FacebookLoginRequest)request;
		
		var client = new HttpClient();
		var requestParams = new Dictionary<string, string>
		{
			{ FacebookAuthConstants.FIELDS, string.Join(',', FacebookAuthConstants.ID, FacebookAuthConstants.NAME, FacebookAuthConstants.EMAIL) },
			{ FacebookAuthConstants.ACCESS_TOKEN, facebookLoginRequest.AccessToken }
		};

		var content = new FormUrlEncodedContent(requestParams);
		var response = await client.PostAsync(FacebookAuthConstants.FACEBOOK_GRAPH_API_URL, content);
		if (!response.IsSuccessStatusCode)
			throw new Exception();

		var authResponse = JsonConvert.DeserializeObject<FacebookAuthResponse>(await response.Content.ReadAsStringAsync());
		if  (authResponse?.Email == null)
			throw new Exception();

		var user = await _userManager.FindByEmailAsync(authResponse.Email) ?? await CreateNewUserAsync(authResponse.Email, authResponse.Name);

		var tokenResponse = new TokenResponse
		{
			AccessToken = _jwtService.GenerateAccessToken(user, _userManager.GetRolesAsync(user).Result.ToList()),
			RefreshToken = await _jwtService.GenerateRefreshToken(user.Id),
			ExpiresAt = DateTimeOffset.Now.AddHours(1)
		};

        return new ServiceActionResult(true) { Data = tokenResponse };
    }
	
	private async Task<DomusUser> CreateNewUserAsync(string email, string userName)
	{
		var user = new DomusUser
		{
			Email = email,
			EmailConfirmed = false,
			UserName = userName,
		};
		var autoGeneratedPassword = RandomPasswordHelper.GenerateRandomPassword(10);
 
		var result = await _userManager.CreateAsync(user, autoGeneratedPassword);
		if (!result.Succeeded)
			throw new Exception();
		await _userManager.AddToRoleAsync(user, UserRoleConstants.CLIENT);
		await _unitOfWork.CommitAsync();
 
		var emailRequest = new PasswordEmail()
		{
			To = user.Email,
			UserName = user.UserName,
			Subject = "PASSWORD CONFIRM EMAIL",
			Password = autoGeneratedPassword
		};
		_emailService.SendEmail(emailRequest);
 
		var userReturned = await _userManager.FindByEmailAsync(email);
		if (userReturned == null)
			throw new Exception();
 
		return userReturned;
	}
}
